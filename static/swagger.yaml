swagger: '2.0'
info:
  title: 'E-Commerce API'
  description: 'An API to manage E-Commerce'
  version: '1.0.0'
host: '127.0.0.1:5001'
schemes:
  - 'http'
consumes: 
  - 'application/json'
produces:
  - 'application/json'
paths: 
  /token/:
    post:
      summary: "Token Endpoint"
      description: "Endpoint for user authentication"
      parameters:
        - in: "body"
          name: "body"
          description: "Credentials for login"
          required: true
          schema:
            $ref: "#/definitions/TokenCredentials"
      responses:
        200:
          description: "Login Successful"
          schema:
            $ref: "#/definitions/TokenResponse"
          examples:
            application/json:
              status: "success"
              messsage: "You have successfully authenticated yourself"
              token: "eyJhbGciJkeMAK1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTY1Njk1ODUsImaJmMTcxNjU2NTk4NSwic3ViIjoxfQ.qcNLua5V9JHGNdkemandKdkWEUvgSWeuQBR2EMNl7Jo"
        401:
          description: "Unsuccessful login"
          schema:
            $ref: "#/definitions/TokenResponse"
          examples:
            application/json:
              status: "error"
              message: "Username and/or password is incorrect"
  /orders/:
    post:
      summary: "Create Order Endpoint"
      description: "Creates a new order for the authenticated user"
      security: 
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Order object"
          required: true
          schema:
            type: "object"
            properties:
              products:
                type: "array"
                items:
                  type: "object"
                  properties:
                    id:
                      type: "integer"
                      example: 1
                  required:
                    - id
            required:
              - products
      responses:
        201:
          description: "Order Created"
        400:
          description: "Invalid Input"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/UnauthorizedError"
  /customers/ :
    get:
      summary: "Get all customers"
      description: "Retrieve a list of all customers"
      parameters:
        - in: query
          name: page
          type: "integer"
          description: "Page of the customers"
          required: false
        - in: query
          name: per_page
          type: "integer"
          description: "Number of customers per page"
          required: false
      responses:
        200:
          description: 'Successful Response'
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CustomerResponse"
    post:
      summary: "Create a new customer"
      description: "Will add a new customer to the database"
      parameters:
        - in: "body"
          name: "body"
          description: "User create object"
          required: true
          schema:
            $ref: "#/definitions/CustomerRequest"
      responses:
        201:
          description: 'Customer Created'
          schema:
            $ref: "#/definitions/CustomerResponse"
  /products/:
    post:
      summary: 'Create a new product'
      description: 'Creates a new product'
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: 'Product object'
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        '201':
          description: 'Product created'
          schema:
            $ref: '#/definitions/Product'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/UnauthorizedError'
    get:
      summary: 'Get all products'
      description: 'Retrieve a list of all products'
      parameters:
        - in: query
          name: page
          type: integer
          description: 'Page number'
        - in: query
          name: per_page
          type: integer
          description: 'Number of products per page'
        - in: query
          name: search
          type: string
          description: 'Search term'
      responses:
        '200':
          description: 'Successful response'
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
  /products/{productId}:
    get:
      summary: 'Get a product'
      description: 'Retrieve a single product'
      parameters:
        - in: path
          name: productId
          type: integer
          required: true
          description: 'Product ID'
      responses:
        '200':
          description: 'Successful response'
          schema:
            $ref: '#/definitions/Product'
        '404':
          description: 'Product not found'
    put:
      summary: 'Update a product'
      description: 'Update an existing product'
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          type: integer
          required: true
          description: 'Product ID'
        - in: body
          name: body
          description: 'Product object'
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: 'Product updated'
          schema:
            $ref: '#/definitions/Product'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/UnauthorizedError'
        '404':
          description: 'Product not found'
    delete:
      summary: 'Delete a product'
      description: 'Delete an existing product'
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          type: integer
          required: true
          description: 'Product ID'
      responses:
        '200':
          description: 'Product deleted'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/UnauthorizedError'
        '404':
          description: 'Product not found'
  /orders/:
    post:
      summary: 'Create a new order'
      description: 'Creates a new order for the authenticated user'
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: 'Order object'
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        '201':
          description: 'Order created'
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/UnauthorizedError'
    get:
      summary: 'Get all orders'
      description: 'Retrieve a list of all orders'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Successful response'
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/UnauthorizedError'
  /orders/{orderId}:
    get:
      summary: 'Get an order'
      description: 'Retrieve a single order'
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          type: integer
          required: true
          description: 'Order ID'
      responses:
        '200':
          description: 'Successful response'
          schema:
            $ref: '#/definitions/Order'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/UnauthorizedError'
        '404':
          description: 'Order not found'
  /orders/{orderId}/track:
    get:
      summary: 'Track an order'
      description: 'Get the status of an order'
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          type: integer
          required: true
          description: 'Order ID'
      responses:
        '200':
          description: 'Successful response'
          schema:
            type: object
            properties:
              status:
                type: string
                description: 'Order status'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/UnauthorizedError'
        '404':
          description: 'Order not found'
  /orders/history:
    get:
      summary: 'Get order history'
      description: 'Retrieve the order history for the authenticated user'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Successful response'
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/UnauthorizedError'
  /shopping-cart/:
    get:
      summary: 'Get shopping cart'
      description: 'Retrieve the shopping cart for the authenticated user'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Successful response'
          schema:
            $ref: '#/definitions/ShoppingCart'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/UnauthorizedError'
    post:
      summary: 'Add item to cart'
      description: 'Add an item to the shopping cart for the authenticated user'
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: 'Cart item object'
          required: true
          schema:
            $ref: '#/definitions/CartItem'
      responses:
        '201':
          description: 'Item added to cart'
          schema:
            $ref: '#/definitions/ShoppingCart'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/UnauthorizedError'
    delete:
      summary: 'Empty shopping cart'
      description: 'Remove all items from the shopping cart for the authenticated user'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Shopping cart emptied'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/UnauthorizedError'
  /shopping-cart/items/{itemId}:
    put:
      summary: 'Update cart item quantity'
      description: 'Update the quantity of an item in the shopping cart for the authenticated user'
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: itemId
          type: integer
          required: true
          description: 'Cart item ID'
        - in: body
          name: body
          description: 'Cart item object'
          required: true
          schema:
            $ref: '#/definitions/CartItem'
      responses:
        '200':
          description: 'Cart item updated'
          schema:
            $ref: '#/definitions/ShoppingCart'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/UnauthorizedError'
        '404':
          description: 'Cart item not found'
    delete:
      summary: 'Remove cart item'
      description: 'Remove an item from the shopping cart for the authenticated user'
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: itemId
          type: integer
          required: true
          description: 'Cart item ID'
      responses:
        '200':
          description: 'Cart item removed'
          schema:
            $ref: '#/definitions/ShoppingCart'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/UnauthorizedError'
        '404':
          description: 'Cart item not found'

definitions: 
  TokenCredentials:
    type: "object"
    properties:
      username:
        type: "string"
        description: "The username of the user"
      password:
        type: "string"
        format: "password"
        description: "The password associated with username"
    required:
      - "username"
      - "password"
  TokenResponse:
    type: "object"
    properties:
      status:
        type: "string"
        description: "Status of the operation"
      message:
        type: "string"
        description: "Message indicating the success or failure"
      token:
        type: "string"
        description: "Authenticated token"
  UnauthorizedError:
    type: "object"
    properties:
      error:
        type: "string"
        description: "The description of the error"
        example: "Invalid token. Please try again"
  Customer:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Customer's full name"
        example: "Michael Jordan"
      email:
        type: "string"
        description: "Customer's email address"
        example: "mj@bulls.com"
      phone:
        type: "string"
        description: "Customer's phone number"
        example: "(555) 555-4321"
      username:
        type: "string"
        description: "Customer's username"
        example: "jumpman23"
  CustomerResponse:
    allOf:
      - $ref: '#/definitions/Customer'
      - type:
        properties:
          id:
            type: "integer"
            description: "Customer's unique ID"
            readonly: true
            example: 23
  CustomerRequest:
    allOf:
      - $ref: "#/definitions/Customer"
      - type:
        properties:
          password:
            type: "string"
            description: "Customer's password"
            example: "6rings!"
  Product:
    type: object
    properties:
      id:
        type: integer
        description: 'Product ID'
      name:
        type: string
        description: 'Product name'
      price:
        type: number
        format: float
        description: 'Product price'
      stock_quantity:
        type: integer
        description: 'Product stock quantity'
  Order:
    type: object
    properties:
      id:
        type: integer
        description: 'Order ID'
      date:
        type: string
        format: date
        description: 'Order date'
      customer_id:
        type: integer
        description: 'Customer ID'
      products:
        type: array
        items:
          $ref: '#/definitions/ProductIdAndQuantity'
  ProductIdAndQuantity:
    type: object
    properties:
      id:
        type: integer
        description: 'Product ID'
      quantity:
        type: integer
        description: 'Product quantity'
  ShoppingCart:
    type: object
    properties:
      id:
        type: integer
        description: 'Shopping cart ID'
      customer_id:
        type: integer
        description: 'Customer ID'
      items:
        type: array
        items:
          $ref: '#/definitions/CartItem'
  CartItem:
    type: object
    properties:
      id:
        type: integer
        description: 'Cart item ID'
      product_id:
        type: integer
        description: 'Product ID'
      quantity:
        type: integer
        description: 'Product quantity'
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

